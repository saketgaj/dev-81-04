package application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;

import java.time.LocalDate;
import java.util.List;

import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;

public class HomePage {
    private Scene homeScene;

    public HomePage(Stage primaryStage, List<String> accountNames) {
        Label titleLabel = new Label("MyBudgeter");
        titleLabel.setFont(Font.font("Roboto Mono", FontWeight.BOLD, 24));
        titleLabel.setTextFill(Color.web("#2E8B57"));

        Button createAccountButton = new Button("Create New Account");
        createAccountButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");

        Button showTransactionsButton = new Button("Show All Transactions");
        showTransactionsButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        showTransactionsButton.setOnAction(e -> primaryStage.setScene(getShowTransactionsScene(primaryStage)));


        Button scheduledTransactionsButton = new Button("View Scheduled Transactions");
        scheduledTransactionsButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");

        Button enterScheduledTransactionsButton = new Button("Enter Scheduled Transaction");
        enterScheduledTransactionsButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        enterScheduledTransactionsButton.setOnAction(e -> primaryStage.setScene(getEnterScheduledTransactionsScene(primaryStage)));




        VBox homeLayout = new VBox(20);  
        homeLayout.setPadding(new Insets(30)); 
        homeLayout.setAlignment(Pos.CENTER); 
        homeLayout.setStyle("-fx-background-color: #F0F8FF;");

        homeLayout.getChildren().addAll(titleLabel, createAccountButton, scheduledTransactionsButton);
        homeLayout.getChildren().add(showTransactionsButton);
        homeLayout.getChildren().add(enterScheduledTransactionsButton);
        homeScene = new Scene(homeLayout, 400, 300);  


        createAccountButton.setOnAction(e -> {
            NewAccountPage newAccountPage = new NewAccountPage(primaryStage, accountNames);
            primaryStage.setScene(newAccountPage.getNewAccountScene());
        });


        scheduledTransactionsButton.setOnAction(e -> primaryStage.setScene(getScheduledTransactionsScene(primaryStage)));
    }


    public Scene getHomeScene() {
        return homeScene;
    }
    private Scene getShowTransactionsScene(Stage primaryStage) {
        Label titleLabel = new Label("All Transactions");
        titleLabel.setFont(new Font("Roboto Mono", 20));


        List<Transaction> allTransactions = Database.getAllTransactions();

        TableView<Transaction> table = new TableView<>();


        TableColumn<Transaction, String> accountCol = new TableColumn<>("Account Name");
        accountCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getAccountName()));

        TableColumn<Transaction, String> typeCol = new TableColumn<>("Transaction Type");
        typeCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getTransactionType()));

        TableColumn<Transaction, LocalDate> dateCol = new TableColumn<>("Transaction Date");
        dateCol.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getTransactionDate()));

        TableColumn<Transaction, String> descriptionCol = new TableColumn<>("Description");
        descriptionCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getDescription()));

        TableColumn<Transaction, Double> paymentCol = new TableColumn<>("Payment Amount");
        paymentCol.setCellValueFactory(data -> new SimpleDoubleProperty(data.getValue().getPaymentAmount()).asObject());

        TableColumn<Transaction, Double> depositCol = new TableColumn<>("Deposit Amount");
        depositCol.setCellValueFactory(data -> new SimpleDoubleProperty(data.getValue().getDepositAmount()).asObject());


        table.getColumns().addAll(accountCol, typeCol, dateCol, descriptionCol, paymentCol, depositCol);


        ObservableList<Transaction> transactions = FXCollections.observableArrayList(allTransactions);
        table.setItems(transactions);
        table.getSortOrder().add(dateCol);
        dateCol.setSortType(TableColumn.SortType.DESCENDING);


        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> primaryStage.setScene(getHomeScene()));

        VBox layout = new VBox(10, titleLabel, table, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 800, 600);
    }
    private Scene getEnterScheduledTransactionsScene(Stage primaryStage) {
        Label titleLabel = new Label("Enter Scheduled Transaction");
        titleLabel.setFont(new Font("Roboto Mono", 20));


        TextField accountNameField = new TextField();
        accountNameField.setPromptText("Account Name");

        TextField transactionTypeField = new TextField();
        transactionTypeField.setPromptText("Transaction Type");

        DatePicker transactionDateField = new DatePicker();
        transactionDateField.setPromptText("Transaction Date");

        TextField descriptionField = new TextField();
        descriptionField.setPromptText("Description");

        TextField paymentAmountField = new TextField();
        paymentAmountField.setPromptText("Payment Amount");

        TextField depositAmountField = new TextField();
        depositAmountField.setPromptText("Deposit Amount");


        Button saveButton = new Button("Save Scheduled Transaction");
        saveButton.setOnAction(e -> {
            String accountName = accountNameField.getText();
            String transactionType = transactionTypeField.getText();
            LocalDate transactionDate = transactionDateField.getValue();
            String description = descriptionField.getText();
            double paymentAmount = Double.parseDouble(paymentAmountField.getText());
            double depositAmount = Double.parseDouble(depositAmountField.getText());


            if (accountName.isEmpty() || transactionType.isEmpty() || transactionDate == null || description.isEmpty()) {
                showError("All fields must be filled!");
            } else {

                boolean success = Database.saveTransaction(accountName, transactionType, transactionDate, description, paymentAmount, depositAmount);
                if (success) {
                    showSuccess("Transaction saved successfully.");
                    primaryStage.setScene(getHomeScene()); 
                } else {
                    showError("Failed to save the transaction.");
                }
            }
        });


        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> primaryStage.setScene(getHomeScene()));

        VBox layout = new VBox(10, titleLabel, accountNameField, transactionTypeField, transactionDateField, descriptionField, paymentAmountField, depositAmountField, saveButton, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 400, 500);
    }

    private void showError(String message) {

        System.out.println("Error: " + message);
    }

    private void showSuccess(String message) {

        System.out.println("Success: " + message);
    }



    private Scene getScheduledTransactionsScene(Stage primaryStage) {

        Label titleLabel = new Label("Scheduled Transactions");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> primaryStage.setScene(getHomeScene()));

        VBox layout = new VBox(10, titleLabel, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 600, 400);
    }
}
