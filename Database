package application;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

public class Database {
	private static final String DATABASE_URL = "jdbc:sqlite:test.db";
    private static List<ScheduledTransaction> scheduledTransactions = new ArrayList<>();


    public static void main(String[] args) {
    	createDatabase();
    }
    
    public static void clearDatabase() {
        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             Statement stmt = conn.createStatement()) {

            // Clear data from tables
            String deleteFromAccounts = "DELETE FROM Accounts;";
            String deleteFromTransactionTypes = "DELETE FROM transaction_types;";
            String deleteFromTransactions = "DELETE FROM transactions;";
            String deleteFromScheduledTransactions = "DELETE FROM scheduled_transactions;";

            stmt.executeUpdate(deleteFromTransactions);
            stmt.executeUpdate(deleteFromTransactionTypes);
            stmt.executeUpdate(deleteFromAccounts);
            stmt.executeUpdate(deleteFromScheduledTransactions);

            System.out.println("All data cleared from the database.");

        } catch (SQLException e) {
            System.err.println("Error clearing the database: " + e.getMessage());
        }
    }
    
    public static void createDatabase() {
        try {
            Class.forName("org.sqlite.JDBC");

            try (Connection connection = DriverManager.getConnection(DATABASE_URL);
                 Statement stmt = connection.createStatement()) {

                // Create Accounts table
                String createAccountsTable = "CREATE TABLE IF NOT EXISTS Accounts (" +
                        "ID INTEGER PRIMARY KEY AUTOINCREMENT, " +
                        "AccountName TEXT NOT NULL, " +
                        "OpeningDate TEXT NOT NULL, " +
                        "OpeningBalance REAL NOT NULL);";

                // Create transaction_types table
                String createTransactionTypesTable = "CREATE TABLE IF NOT EXISTS transaction_types (" +
                        "type_name TEXT PRIMARY KEY);";

                // Create transactions table with transaction_type column
                String createTransactionsTable = "CREATE TABLE IF NOT EXISTS transactions (" +
                	    "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                	    "account_name TEXT NOT NULL, " +
                	    "transaction_type TEXT NOT NULL, " +
                	    "transaction_date TEXT NOT NULL, " +
                	    "description TEXT, " +
                	    "payment_amount REAL, " +
                	    "deposit_amount REAL, " +
                	    "FOREIGN KEY(account_name) REFERENCES Accounts(AccountName), " +
                	    "FOREIGN KEY(transaction_type) REFERENCES transaction_types(type_name));";


                // Execute SQL statements in order
                stmt.executeUpdate(createAccountsTable);
                stmt.executeUpdate(createTransactionTypesTable);
                stmt.executeUpdate(createTransactionsTable);

            }
        } catch (ClassNotFoundException e) {
            System.err.println("SQLite JDBC Driver not found.");
        } catch (SQLException e) {
            System.err.println("SQL Exception: " + e.getMessage());
        }
    }
    
    public static List<Transaction> getAllTransactions() {
        List<Transaction> transactions = new ArrayList<>();
        String sql = "SELECT * FROM transactions ORDER BY transaction_date DESC";

        try (Connection conn =  DriverManager.getConnection(DATABASE_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                transactions.add(new Transaction(
                		rs.getInt("id"),
                        rs.getString("account_name"),
                        rs.getString("transaction_type"),
                        LocalDate.parse(rs.getString("transaction_date")),
                        rs.getString("description"),
                        rs.getDouble("payment_amount"),
                        rs.getDouble("deposit_amount")
                ));
            }

        } catch (SQLException e) {
            System.err.println("Error fetching transactions: " + e.getMessage());
        }
        return transactions;
    }
    
//    public static void ensureScheduledTransactionsTableExists() {
//        String sql = "CREATE TABLE IF NOT EXISTS scheduled_transactions (" +
//                     "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
//                     "schedule_name TEXT NOT NULL, " +
//                     "account_name TEXT NOT NULL, " +
//                     "transaction_type TEXT NOT NULL, " +
//                     "frequency TEXT NOT NULL, " +
//                     "due_date INTEGER NOT NULL, " +
//                     "payment_amount REAL NOT NULL, " +
//                     "FOREIGN KEY (account_name) REFERENCES Accounts(AccountName), " +
//                     "FOREIGN KEY (transaction_type) REFERENCES transaction_types(type_name)" +
//                     ")";
//
//        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
//             Statement stmt = conn.createStatement()) {
//
//            stmt.executeUpdate(sql); // Create the table if it doesn't exist
//            System.out.println("Scheduled Transactions table ensured.");
//
//        } catch (SQLException e) {
//            System.err.println("Error ensuring scheduled_transactions table exists: " + e.getMessage());
//        }
//    }
    
    public static void saveTransactionType(String transactionType) {
        String sql = "INSERT OR IGNORE INTO transaction_types (type_name) VALUES (?)";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, transactionType);
            pstmt.executeUpdate();

        } catch (SQLException e) {
            System.err.println("Error saving transaction type: " + e.getMessage());
        }
    }
    
    public static ObservableList<String> getAllTransactionTypes() {
    	ObservableList<String> transactionTypes = FXCollections.observableArrayList();
        String sql = "SELECT type_name FROM transaction_types";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                transactionTypes.add(rs.getString("type_name"));
            }

        } catch (SQLException e) {
            System.err.println("Error fetching transaction types: " + e.getMessage());
        }
        return transactionTypes;
    }
    
    
    
    public static ObservableList<ScheduledTransaction> getAllScheduledTransactions() {
        ObservableList<ScheduledTransaction> scheduledTransactionsList = FXCollections.observableArrayList();
        String sql = "SELECT * FROM scheduled_transactions " +
                     "ORDER BY due_date ASC"; // Adjust sorting if needed

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
            	int id = rs.getInt("id");
                String scheduleName = rs.getString("schedule_name");
                String accountName = rs.getString("account_name");
                String transactionType = rs.getString("transaction_type");
                String frequency = rs.getString("frequency");
                int dueDate = rs.getInt("due_date");
                double paymentAmount = rs.getDouble("payment_amount");

                // Create the ScheduledTransaction object with the retrieved data
                ScheduledTransaction scheduledTransaction = new ScheduledTransaction(
                    id, scheduleName,
                    accountName,
                    transactionType,
                    frequency,
                    dueDate,
                    paymentAmount
                );

                scheduledTransactionsList.add(scheduledTransaction);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return scheduledTransactionsList;
    }

    public static ObservableList<Transaction> searchTransactionsByDescription(String substring) {
        ObservableList<Transaction> results = FXCollections.observableArrayList();
        String sql = "SELECT * FROM transactions WHERE description LIKE ?";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, "%" + substring + "%");
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                Transaction transaction = new Transaction(
                	rs.getInt("id"),
                    rs.getString("account_name"),
                    rs.getString("transaction_type"),
                    LocalDate.parse(rs.getString("transaction_date")),
                    rs.getString("description"),
                    rs.getDouble("payment_amount"),
                    rs.getDouble("deposit_amount")
                );
                results.add(transaction);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return results;
    }


    public static ObservableList<ScheduledTransaction> searchScheduledTransactionsByName(String substring) {
        ObservableList<ScheduledTransaction> results = FXCollections.observableArrayList();
        String sql = "SELECT * FROM scheduled_transactions WHERE schedule_name LIKE ?";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, "%" + substring + "%");
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                ScheduledTransaction scheduledTransaction = new ScheduledTransaction(
                		rs.getInt("id"), rs.getString("schedule_name"),
                    rs.getString("account_name"),
                    rs.getString("transaction_type"),
                    rs.getString("frequency"),
                    rs.getInt("due_date"),
                    rs.getDouble("payment_amount")
                );
                results.add(scheduledTransaction);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return results;
    }


    
    
    
    public static void saveAccount(Account account) {
        String sql = "INSERT INTO accounts (name, opening_date, opening_balance) VALUES (?, ?, ?)";
        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, account.getAccountName());
            pstmt.setDate(2, Date.valueOf(account.getOpeningDate())); // Get LocalDate from SimpleObjectProperty
            pstmt.setDouble(3, account.getOpeningBalance()); // Get double value from SimpleDoubleProperty
            pstmt.executeUpdate();
            System.out.println("Account added successfully: " + account.getAccountName());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public static void addAccount(Account account) {
        String sql = "INSERT INTO Accounts(AccountName, OpeningDate, OpeningBalance) VALUES(?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, account.getAccountName());
            pstmt.setString(2, account.getOpeningDate().toString());
            pstmt.setDouble(3, account.getOpeningBalance());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public static ObservableList<String> getAllAccountNames(){
    	ObservableList<String> accountNames = FXCollections.observableArrayList();
    	String sql = "SELECT AccountName, OpeningDate, OpeningBalance FROM Accounts ORDER BY OpeningDate DESC";
    	
    	try (Connection conn = DriverManager.getConnection(DATABASE_URL);
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

               while (rs.next()) {
                   String name = rs.getString("AccountName");
                   accountNames.add(name);
               }
           } catch (SQLException e) {
               e.printStackTrace();
           }
    	return accountNames;
    }

    public static ObservableList<Account> getAllAccounts() {
        ObservableList<Account> accounts = FXCollections.observableArrayList();
        String sql = "SELECT AccountName, OpeningDate, OpeningBalance FROM Accounts ORDER BY OpeningDate DESC";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                String name = rs.getString("AccountName");
                LocalDate date = LocalDate.parse(rs.getString("OpeningDate"));
                double balance = rs.getDouble("OpeningBalance");

                accounts.add(new Account(name, date, balance));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return accounts;
    }
    // Method to save a transaction to the database
    public static boolean saveTransaction(String accountName, String transactionType, LocalDate date, 
    	    String description, double paymentAmount, double depositAmount) {
    	    String sql = "INSERT INTO transactions(account_name, transaction_type, transaction_date, description, payment_amount, deposit_amount) " +
    	                 "VALUES(?, ?, ?, ?, ?, ?)";

    	    try (Connection conn = DriverManager.getConnection(DATABASE_URL);
    	         PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) { // Request generated keys
    	        pstmt.setString(1, accountName);
    	        pstmt.setString(2, transactionType);
    	        pstmt.setString(3, date.toString());
    	        pstmt.setString(4, description);
    	        pstmt.setDouble(5, paymentAmount);
    	        pstmt.setDouble(6, depositAmount);
    	        
    	        pstmt.executeUpdate(); // Execute the insert

    	        // Retrieve the generated ID
    	        try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
    	            if (generatedKeys.next()) {
    	                int generatedId = generatedKeys.getInt(1);
    	                System.out.println("Inserted transaction with ID: " + generatedId);
    	            }
    	        }
    	        return true;
    	    } catch (SQLException e) {
    	        e.printStackTrace();
    	        return false;
    	    }
    	}


    
    public static boolean updateTransaction(Transaction transaction) {
        // Update statement to modify the transaction based on its ID
        String sql = "UPDATE transactions SET account_name = ?, transaction_type = ?, transaction_date = ?, description = ?, payment_amount = ?, deposit_amount = ? WHERE id = ?";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // Set parameters for the prepared statement
            pstmt.setString(1, transaction.getAccountName());
            pstmt.setString(2, transaction.getTransactionType());
            pstmt.setString(3, transaction.getTransactionDate().toString());
            pstmt.setString(4, transaction.getDescription());
            pstmt.setDouble(5, transaction.getPaymentAmount());
            pstmt.setDouble(6, transaction.getDepositAmount());
            
            // Use the transaction ID to specify which transaction to update
            pstmt.setInt(7, transaction.getID());  // Set the ID for the WHERE clause

            // Execute the update query
            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0; // If rows are affected, the update was successful

        } catch (SQLException e) {
            e.printStackTrace();
            return false; // Update failed
        }
    }

    
    public static ObservableList<Transaction> refreshTransactions() {
        ObservableList<Transaction> transactions = FXCollections.observableArrayList();
        String sql = "SELECT * FROM transactions ORDER BY transaction_date DESC";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                transactions.add(new Transaction(
                		rs.getInt("id"),
                        rs.getString("account_name"),
                        rs.getString("transaction_type"),
                        LocalDate.parse(rs.getString("transaction_date")),
                        rs.getString("description"),
                        rs.getDouble("payment_amount"),
                        rs.getDouble("deposit_amount")
                ));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return transactions;
    }
    
    public static ObservableList<ScheduledTransaction> refreshScheduledTransactions() {
        ObservableList<ScheduledTransaction> scheduledTransactions = FXCollections.observableArrayList();
        String sql = "SELECT * FROM scheduled_transactions ORDER BY due_date ASC";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

        	while (rs.next()) {
        	    scheduledTransactions.add(new ScheduledTransaction(
        	        rs.getInt("id"),
        	        rs.getString("schedule_name"),
        	        rs.getString("account_name"),
        	        rs.getString("transaction_type"),
        	        rs.getString("frequency"),
        	        rs.getInt("due_date"), // Fixed: Keep this inside the constructor
        	        rs.getDouble("payment_amount")  // Fixed: Moved into the constructor
        	    ));
        	}
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return scheduledTransactions;
    }
    
    public static ObservableList<ScheduledTransaction> getTodayScheduledTransactions() {
        ObservableList<ScheduledTransaction> scheduledTransactions = FXCollections.observableArrayList();
        String sql = "SELECT * FROM scheduled_transactions WHERE due_date = ?"; // Query to match the day

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // Get the day of the month from today's date
            int todayDayOfMonth = LocalDate.now().getDayOfMonth();
            pstmt.setInt(1, todayDayOfMonth); // Pass today's day of the month to the query

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    // Get the transaction data
                    int id = rs.getInt("id");
                    String scheduleName = rs.getString("schedule_name");
                    String accountName = rs.getString("account_name");
                    String transactionType = rs.getString("transaction_type");
                    String frequency = rs.getString("frequency");
                    int dueDate = rs.getInt("due_date");
                    double paymentAmount = rs.getDouble("payment_amount");

                    // Check if the transaction is scheduled for today
                    if (dueDate == todayDayOfMonth) {
                        // Create a new ScheduledTransaction object
                        ScheduledTransaction scheduledTransaction = new ScheduledTransaction(
                            id, 
                            scheduleName, 
                            accountName, 
                            transactionType, 
                            frequency, 
                            dueDate, 
                            paymentAmount
                        );

                        scheduledTransactions.add(scheduledTransaction); // Add to list
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error fetching scheduled transactions: " + e.getMessage());
        }
        return scheduledTransactions;
    }







    
    public static boolean saveScheduledTransaction(String scheduleName, String accountName, String transactionType,
    	    String frequency, int dueDate, double paymentAmount) {
    	    String sql = "INSERT INTO scheduled_transactions (schedule_name, account_name, transaction_type, frequency, due_date, payment_amount) " +
    	                 "VALUES (?, ?, ?, ?, ?, ?)";
    	    
    	    try (Connection conn = DriverManager.getConnection(DATABASE_URL);
    	         PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
    	    
    	        pstmt.setString(1, scheduleName);
    	        pstmt.setString(2, accountName);
    	        pstmt.setString(3, transactionType);
    	        pstmt.setString(4, frequency);
    	        pstmt.setInt(5, dueDate);
    	        pstmt.setDouble(6, paymentAmount);
    	    
    	        pstmt.executeUpdate();
    	    
    	     // Retrieve the generated ID
    	        try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
    	            if (generatedKeys.next()) {
    	                int generatedId = generatedKeys.getInt(1);
    	                System.out.println("Inserted scheduled transaction with ID: " + generatedId);
    	            }
    	        }
    	        return true;
    	    
    	    } catch (SQLException e) {
    	        System.err.println("Error saving scheduled transaction: " + e.getMessage());
    	        return false;
    	    }

    }
    
    public static boolean updateScheduledTransaction(ScheduledTransaction st) {
        // Update statement to modify the transaction based on its ID
        String sql = "UPDATE scheduled_transactions SET schedule_name = ?, account_name = ?, transaction_type = ?, frequency = ?, due_date = ?, payment_amount = ? WHERE id = ?";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // Set parameters for the prepared statement
        	 pstmt.setString(1, st.getScheduleName());
            pstmt.setString(2, st.getAccountName());
            pstmt.setString(3, st.getTransactionType());
            pstmt.setString(4, st.getFrequency().toString());
            pstmt.setInt(5, st.getDueDate());
            pstmt.setDouble(6, st.getPaymentAmount());
            
            // Use the transaction ID to specify which transaction to update
            pstmt.setInt(7, st.getId());  // Set the ID for the WHERE clause

            // Execute the update query
            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0; // If rows are affected, the update was successful

        } catch (SQLException e) {
            e.printStackTrace();
            return false; // Update failed
        }
    }
}
