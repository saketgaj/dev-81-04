package application;

import javafx.application.Application;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import javafx.scene.input.MouseEvent;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Main extends Application {
    private static List<String> accountNames = new ArrayList<>();
    private static Set<String> transactionTypes = new HashSet<>(); // Store unique transaction types
    private Stage primaryStage;
    private Button viewAccountsButton;

    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        Database.createDatabase();
        
        loadResources();
        
        refreshAccountNames();
        refreshTransactionTypes();
        
        notifyScheduledTransactions();

        setHomeScene();

        primaryStage.setTitle("MyBudgeter");
        primaryStage.setResizable(true);
        primaryStage.show();
    }

    private void loadResources() {
        try {
            Font.loadFont(Main.class.getResourceAsStream("/RobotoMono.ttf"), 14);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void refreshAccountNames() {
        accountNames.clear();
        for (Account account : Database.getAllAccounts()) {
            accountNames.add(account.getAccountName());
        }
    }
    
    private void refreshTransactionTypes() {
        transactionTypes.clear();
        transactionTypes.addAll(Database.getAllTransactionTypes()); // Fetch from the database
    }

    private Scene getScheduledTransactionsScene() {
        Label titleLabel = new Label("Scheduled Transactions");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        // Create a TableView for scheduled transactions
        ObservableList<ScheduledTransaction> scheduledTransactions = Database.getAllScheduledTransactions();
        	
        TableView<ScheduledTransaction> table = new TableView<>();
        table.setItems(scheduledTransactions);  // Use setItems to bind data to the TableView

        // Define columns
        TableColumn<ScheduledTransaction, String> scheduleNameCol = new TableColumn<>("Schedule Name");
        scheduleNameCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getScheduleName()));

        TableColumn<ScheduledTransaction, String> accountCol = new TableColumn<>("Account Name");
        accountCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getAccountName()));

        TableColumn<ScheduledTransaction, String> typeCol = new TableColumn<>("Transaction Type");
        typeCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getTransactionType()));

        TableColumn<ScheduledTransaction, String> frequencyCol = new TableColumn<>("Frequency");
        frequencyCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getFrequency()));

        TableColumn<ScheduledTransaction, Integer> dueDateCol = new TableColumn<>("Due Date");
        dueDateCol.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getDueDate()));

        TableColumn<ScheduledTransaction, Double> amountCol = new TableColumn<>("Payment Amount");
        amountCol.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getPaymentAmount()));

        // Add columns to the table
        table.getColumns().addAll(scheduleNameCol, accountCol, typeCol, frequencyCol, dueDateCol, amountCol);

        // Sort table by Due Date in ascending order
        table.getSortOrder().add(dueDateCol);

        // Back button to return to the homepage
        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        VBox layout = new VBox(10, titleLabel, table, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 600, 400);
    }


    private Scene getCreateScheduledTransactionScene() {
    	refreshAccountNames();
    	
        Label titleLabel = new Label("Create Scheduled Transaction");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        TextField scheduleName = new TextField();
        scheduleName.setPromptText("Schedule Name (e.g., Rent)");

        ComboBox<String> accountDropdown = new ComboBox<>();
        accountDropdown.getItems().addAll(accountNames); 
        accountDropdown.getSelectionModel().selectFirst(); 

        ComboBox<String> transactionTypeDropdown = new ComboBox<>();
        transactionTypeDropdown.getItems().addAll(transactionTypes);
        transactionTypeDropdown.getSelectionModel().selectFirst();

        TextField dueDateField = new TextField();
        dueDateField.setPromptText("Due Date (e.g., 15)");

        TextField paymentAmount = new TextField();
        paymentAmount.setPromptText("Payment Amount");

        Label errorLabel = new Label();
        errorLabel.setStyle("-fx-text-fill: red;");

        Button saveButton = new Button("Save Scheduled Transaction");
        saveButton.setOnAction(e -> {
            String schedule = scheduleName.getText().trim();
            String account = accountDropdown.getValue();
            String transactionType = transactionTypeDropdown.getValue();
            String dueDateStr = dueDateField.getText().trim();
            String amountStr = paymentAmount.getText().trim();
                        
            // Validation logic
            if (schedule.isEmpty() || account == null || transactionType == null || dueDateStr.isEmpty() || amountStr.isEmpty()) {
                errorLabel.setText("Please fill in all required fields.");
            } else if (!isInteger(dueDateStr)) {
                errorLabel.setText("Due Date must be a valid integer.");
            } else if (!isDouble(amountStr)) {
                errorLabel.setText("Payment Amount must be a valid number.");
            } else {
                // Reset error label if validation passes
                errorLabel.setText("");

                // Save to the database
                boolean saved = Database.saveScheduledTransaction(schedule, account, transactionType, "Monthly",
                        Integer.parseInt(dueDateStr), Double.parseDouble(amountStr));

                if (saved) {
                    errorLabel.setStyle("-fx-text-fill: green;");
                    errorLabel.setText("Scheduled Transaction saved successfully.");
                    scheduleName.clear();
                    dueDateField.clear();
                    paymentAmount.clear();
                } else {
                    errorLabel.setText("Failed to save transaction. Try again.");
                }
            }
        });

        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        VBox layout = new VBox(10, titleLabel, scheduleName, accountDropdown, transactionTypeDropdown, dueDateField,
                paymentAmount, errorLabel, saveButton, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 400, 400);
    }


    private boolean isInteger(String text) {
        try {
            Integer.parseInt(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private void setHomeScene() {
    	refreshAccountNames();
        Label titleLabel = new Label("MyBudgeter");
        titleLabel.setFont(new Font("Roboto Mono", 24));
        titleLabel.setTextFill(javafx.scene.paint.Color.web("#2E8B57"));

        Button createAccountButton = new Button("Create New Account");
        createAccountButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        createAccountButton.setOnAction(e -> primaryStage.setScene(new NewAccountPage(primaryStage, accountNames).getNewAccountScene()));

        Button defineTransactionTypesButton = new Button("Define Transaction Types");
        defineTransactionTypesButton.setStyle("-fx-background-color: #FF8C00; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        defineTransactionTypesButton.setOnAction(e -> primaryStage.setScene(getDefineTransactionTypesScene()));
        
        Button getEnterTransactionTypesSceneButton = new Button("Enter Transaction");
        getEnterTransactionTypesSceneButton.setStyle("-fx-background-color: #FF8C00; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        getEnterTransactionTypesSceneButton.setOnAction(e -> primaryStage.setScene(getEnterTransactionTypesScene()));
        
        Button createScheduledTransactionButton = new Button("Create Scheduled Transaction");
        createScheduledTransactionButton.setStyle("-fx-background-color: #FF8C00; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        createScheduledTransactionButton.setOnAction(e -> primaryStage.setScene(getCreateScheduledTransactionScene())); 
        
        Button getScheduledTransactionButton = new Button("View Scheduled Transactions");
        getScheduledTransactionButton.setStyle("-fx-background-color: #FF8C00; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        getScheduledTransactionButton.setOnAction(e -> primaryStage.setScene(getScheduledTransactionsScene())); 

        Button searchTransactionsButton = new Button("Search Transactions");
        searchTransactionsButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        searchTransactionsButton.setOnAction(e -> primaryStage.setScene(getSearchTransactionScene(primaryStage)));

        Button searchScheduledTransactionsButton = new Button("Search Scheduled Transactions");
        searchScheduledTransactionsButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        searchScheduledTransactionsButton.setOnAction(e -> primaryStage.setScene(getScheduledSearchTransactionScene(primaryStage)));
        
        Button viewTransactionsButton = new Button("View All Transactions");
        viewTransactionsButton.setStyle("-fx-background-color: #008CBA; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        viewTransactionsButton.setOnAction(e -> showTransactionsTable(primaryStage));
        
        Button transactionReportButton = new Button("Transaction Report");
        transactionReportButton.setStyle("-fx-background-color: #008CBA; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        transactionReportButton.setOnAction(e -> primaryStage.setScene(getTransactionReportScene(primaryStage)));
        
        Button transactionTypeReportButton = new Button("Transaction Type Report");
        transactionTypeReportButton.setStyle("-fx-background-color: #008CBA; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        transactionTypeReportButton.setOnAction(e -> primaryStage.setScene(getTransactionTypeReportScene(primaryStage)));
   


        if (viewAccountsButton == null) {
            viewAccountsButton = new Button("View All Accounts");
            viewAccountsButton.setStyle("-fx-background-color: #008CBA; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
            viewAccountsButton.setOnAction(e -> showAccountsTable(primaryStage));
        }
        
        

        VBox homeLayout = new VBox(20);
        homeLayout.setPadding(new Insets(30));
        homeLayout.setAlignment(Pos.CENTER);
        homeLayout.setStyle("-fx-background-color: #F0F8FF;");
        homeLayout.getChildren().addAll(titleLabel, createAccountButton, defineTransactionTypesButton, getEnterTransactionTypesSceneButton,  createScheduledTransactionButton, getScheduledTransactionButton, viewTransactionsButton, transactionReportButton, transactionTypeReportButton,  viewAccountsButton, searchTransactionsButton, searchScheduledTransactionsButton);

        primaryStage.setScene(new Scene(homeLayout, 1000, 800));
    }
    
    private void showTransactionsTable(Stage primaryStage) {
        // Fetch all transactions from the database
        List<Transaction> transactions = Database.getAllTransactions();

        // Create an ObservableList to be used in TableView
        ObservableList<Transaction> transactionData = javafx.collections.FXCollections.observableArrayList(transactions);

        TableView<Transaction> table = new TableView<>(transactionData);

        // Create TableColumn for each transaction property
        TableColumn<Transaction, String> accountCol = new TableColumn<>("Account Name");
        accountCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getAccountName()));

        TableColumn<Transaction, String> typeCol = new TableColumn<>("Transaction Type");
        typeCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getTransactionType()));

        TableColumn<Transaction, LocalDate> dateCol = new TableColumn<>("Transaction Date");
        dateCol.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getTransactionDate()));

        TableColumn<Transaction, String> descriptionCol = new TableColumn<>("Description");
        descriptionCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getDescription()));

        TableColumn<Transaction, Double> paymentAmountCol = new TableColumn<>("Payment Amount");
        paymentAmountCol.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getPaymentAmount()));

        TableColumn<Transaction, Double> depositAmountCol = new TableColumn<>("Deposit Amount");
        depositAmountCol.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getDepositAmount()));

        // Add columns to the table
        table.getColumns().addAll(accountCol, typeCol, dateCol, descriptionCol, paymentAmountCol, depositAmountCol);

        // Back button to return to the homepage
        Button backButton = new Button("Back to Homepage");
        backButton.setStyle("-fx-background-color: #FF6347; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        backButton.setOnAction(e -> setHomeScene());

        VBox bottomLayout = new VBox(backButton);
        bottomLayout.setAlignment(Pos.CENTER);
        bottomLayout.setPadding(new Insets(10));

        BorderPane layout = new BorderPane(table);
        layout.setBottom(bottomLayout);

        primaryStage.setScene(new Scene(layout, 600, 400));
    }


    private Scene getDefineTransactionTypesScene() {
        Label titleLabel = new Label("Define Transaction Types");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        TextField transactionTypeField = new TextField();
        transactionTypeField.setPromptText("Enter transaction type name");

        Label errorLabel = new Label();
        errorLabel.setStyle("-fx-text-fill: red;");
        
        

        Button saveButton = new Button("Save Transaction Type");
        saveButton.setOnAction(e -> {
            String transactionType = transactionTypeField.getText().trim();

            if (transactionType.isEmpty()) {
                errorLabel.setText("Transaction type name cannot be empty.");
            } 
         else if (transactionTypes.contains(transactionType)) {
            errorLabel.setText("Transaction type already exists.");
        }
        else {
                Database.saveTransactionType(transactionType);
                transactionTypes.clear();
                transactionTypes.addAll(Database.getAllTransactionTypes());
                errorLabel.setText("Transaction type added successfully.");
                transactionTypeField.clear();
            }
  
        });

        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        VBox layout = new VBox(10, titleLabel, transactionTypeField, errorLabel, saveButton, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 400, 300);
    }

    private Scene getSearchTransactionScene(Stage primaryStage) {
        // Title for the search page
        Label titleLabel = new Label("Search Transactions");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        // Search input field
        TextField searchField = new TextField();
        searchField.setPromptText("Enter description substring");

        // TableView to display transactions
        TableView<Transaction> table = new TableView<>();

        // Define table columns
        TableColumn<Transaction, String> accountCol = new TableColumn<>("Account Name");
        accountCol.setCellValueFactory(data -> data.getValue().accountNameProperty());

        TableColumn<Transaction, String> typeCol = new TableColumn<>("Transaction Type");
        typeCol.setCellValueFactory(data -> data.getValue().transactionTypeProperty());

        TableColumn<Transaction, LocalDate> dateCol = new TableColumn<>("Transaction Date");
        dateCol.setCellValueFactory(data -> data.getValue().transactionDateProperty());

        TableColumn<Transaction, String> descriptionCol = new TableColumn<>("Description");
        descriptionCol.setCellValueFactory(data -> data.getValue().descriptionProperty());

        TableColumn<Transaction, Double> paymentAmountCol = new TableColumn<>("Payment Amount");
        paymentAmountCol.setCellValueFactory(data -> data.getValue().paymentAmountProperty().asObject());

        TableColumn<Transaction, Double> depositAmountCol = new TableColumn<>("Deposit Amount");
        depositAmountCol.setCellValueFactory(data -> data.getValue().depositAmountProperty().asObject());

        table.getColumns().addAll(accountCol, typeCol, dateCol, descriptionCol, paymentAmountCol, depositAmountCol);

        // Load all transactions initially
        ObservableList<Transaction> allTransactions = FXCollections.observableArrayList(Database.getAllTransactions());
        table.setItems(allTransactions);

        // Search button to filter results
        Button searchButton = new Button("Search");
        searchButton.setOnAction(e -> {
            String substring = searchField.getText().trim();
            if (!substring.isEmpty()) {
                ObservableList<Transaction> results = Database.searchTransactionsByDescription(substring);
                table.setItems(results);
            } else {
                table.setItems(allTransactions); // Reset to show all transactions if search field is empty
            }
        });

        // Back button to return to the homepage
        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        // Event handler for when a row is clicked in the table
        table.setOnMouseClicked((MouseEvent event) -> {
            Transaction selectedTransaction = table.getSelectionModel().getSelectedItem();
            if (selectedTransaction != null) {
                showEditTransactionPage(selectedTransaction, table); // Pass the TableView reference
            }
        });

        // Layout for the search page
        VBox layout = new VBox(10, titleLabel, searchField, searchButton, table, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 800, 600);
    }
    
    private void showEditTransactionPage(Transaction selectedTransaction, TableView<Transaction> table) {
        // Create editable fields for the selected transaction
    	ComboBox<String> accountNameComboBox = new ComboBox<>(Database.getAllAccountNames());
    	accountNameComboBox.setValue(selectedTransaction.getAccountName());
    	ComboBox<String> transactionTypeComboBox = new ComboBox<>(Database.getAllTransactionTypes());
    	transactionTypeComboBox.setValue(selectedTransaction.getTransactionType());
    	DatePicker transactionDateField = new DatePicker(selectedTransaction.getTransactionDate());
        TextField descriptionField = new TextField(selectedTransaction.getDescription());
        TextField paymentAmountField = new TextField(String.valueOf(selectedTransaction.getPaymentAmount()));
        TextField depositAmountField = new TextField(String.valueOf(selectedTransaction.getDepositAmount()));
        Label errorLabel = new Label();
        errorLabel.setStyle("-fx-text-fill: red;");

        // Save button to save changes
        Button saveButton = new Button("Save Changes");
        saveButton.setOnAction(e -> {
            try {
                String accountName = accountNameComboBox.getValue();
                String transactionType = transactionTypeComboBox.getValue();
                LocalDate transactionDate = transactionDateField.getValue();
                String description = descriptionField.getText();
                double paymentAmount = Double.parseDouble(paymentAmountField.getText());
                double depositAmount = Double.parseDouble(depositAmountField.getText());

                // Update the selected transaction
                selectedTransaction.setAccountName(accountName);
                selectedTransaction.setTransactionType(transactionType);
                selectedTransaction.setTransactionDate(transactionDate);
                selectedTransaction.setDescription(description);
                selectedTransaction.setPaymentAmount(paymentAmount);
                selectedTransaction.setDepositAmount(depositAmount);

                // Save the updated transaction to the database
                boolean success = Database.updateTransaction(selectedTransaction);
                if (success) {
                    // After saving, refresh the TableView with updated data
                    ObservableList<Transaction> updatedTransactions = Database.refreshTransactions();
                    table.setItems(updatedTransactions); // Refresh table items
                    errorLabel.setText("Succesfully edited.");

                    // Go back to the search page
                    primaryStage.setScene(getSearchTransactionScene(primaryStage));
                } else {
                    errorLabel.setText("Error, failed to save changes.");
                }
            } catch (NumberFormatException ex) {
                errorLabel.setText("Invalid input. Please check the amounts.");
            }
        });

        // Layout for the edit page
        VBox editLayout = new VBox(10, accountNameComboBox, transactionTypeComboBox, transactionDateField, descriptionField, 
                paymentAmountField, depositAmountField, saveButton, errorLabel);
        editLayout.setPadding(new Insets(20));
        editLayout.setAlignment(Pos.CENTER);

        // Create and set the scene
        primaryStage.setScene(new Scene(editLayout, 400, 400));
    }
    
    private Scene getScheduledSearchTransactionScene(Stage primaryStage) {
        // Title for the search page
        Label titleLabel = new Label("Search Scheduled Transactions");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        // Search input field
        TextField searchField = new TextField();
        searchField.setPromptText("Enter schedule name substring");

        // TableView to display scheduled transactions
        TableView<ScheduledTransaction> table = new TableView<>();

        // Define table columns
        TableColumn<ScheduledTransaction, String> scheduleNameCol = new TableColumn<>("Schedule Name");
        scheduleNameCol.setCellValueFactory(data -> data.getValue().scheduleNameProperty());

        TableColumn<ScheduledTransaction, String> accountCol = new TableColumn<>("Account Name");
        accountCol.setCellValueFactory(data -> data.getValue().accountNameProperty());

        TableColumn<ScheduledTransaction, String> typeCol = new TableColumn<>("Transaction Type");
        typeCol.setCellValueFactory(data -> data.getValue().transactionTypeProperty());

        TableColumn<ScheduledTransaction, String> frequencyCol = new TableColumn<>("Frequency");
        frequencyCol.setCellValueFactory(data -> data.getValue().frequencyProperty());

        TableColumn<ScheduledTransaction, String> dueDateCol = new TableColumn<>("Due Date");
        dueDateCol.setCellValueFactory(data -> 
            new SimpleStringProperty(String.valueOf(data.getValue().getDueDate())));


        TableColumn<ScheduledTransaction, Double> paymentAmountCol = new TableColumn<>("Payment Amount");
        paymentAmountCol.setCellValueFactory(data -> data.getValue().paymentAmountProperty().asObject());

        table.getColumns().addAll(scheduleNameCol, accountCol, typeCol, frequencyCol, dueDateCol, paymentAmountCol);

        // Load all scheduled transactions initially
        ObservableList<ScheduledTransaction> allScheduledTransactions = FXCollections.observableArrayList(Database.getAllScheduledTransactions());
        table.setItems(allScheduledTransactions);

        // Search button to filter results
        Button searchButton = new Button("Search");
        searchButton.setOnAction(e -> {
            String substring = searchField.getText().trim();
            if (!substring.isEmpty()) {
                ObservableList<ScheduledTransaction> results = Database.searchScheduledTransactionsByName(substring);
                table.setItems(results);
            } else {
                table.setItems(allScheduledTransactions); // Reset to show all scheduled transactions if search field is empty
            }
        });

        // Back button to return to the homepage
        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        // Event handler for when a row is clicked in the table
        table.setOnMouseClicked((MouseEvent event) -> {
            ScheduledTransaction selectedST = table.getSelectionModel().getSelectedItem();
            if (selectedST != null) {
                showEditScheduledTransactionPage(selectedST, table); // Pass the TableView reference
            }
        });

        // Layout for the search page
        VBox layout = new VBox(10, titleLabel, searchField, searchButton, table, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 800, 600);
    }



    private void showEditScheduledTransactionPage(ScheduledTransaction selectedST, TableView<ScheduledTransaction> table) {
        // Create editable fields for the selected scheduled transaction
        TextField scheduleNameField = new TextField(selectedST.getScheduleName());
        ComboBox<String> accountNameComboBox = new ComboBox<>(Database.getAllAccountNames());
    	accountNameComboBox.setValue(selectedST.getAccountName());
    	ComboBox<String> transactionTypeComboBox = new ComboBox<>(Database.getAllTransactionTypes());
    	transactionTypeComboBox.setValue(selectedST.getTransactionType());
        TextField frequencyField = new TextField(selectedST.getFrequency());
        TextField dueDateField = new TextField(String.valueOf(selectedST.getDueDate()));
        TextField paymentAmountField = new TextField(String.valueOf(selectedST.getPaymentAmount()));
        Label errorLabel = new Label();
        errorLabel.setStyle("-fx-text-fill: red;");

        // Save button to save changes
        Button saveButton = new Button("Save Changes");
        saveButton.setOnAction(e -> {
            try {
                String scheduleName = scheduleNameField.getText();
                String accountName = accountNameComboBox.getValue();
                String transactionType = transactionTypeComboBox.getValue();
                String frequency = frequencyField.getText();
                int dueDate = Integer.parseInt(dueDateField.getText().trim());;
                double paymentAmount = Double.parseDouble(paymentAmountField.getText());

                // Update the selected scheduled transaction
                selectedST.setScheduleName(scheduleName);
                selectedST.setAccountName(accountName);
                selectedST.setTransactionType(transactionType);
                selectedST.setFrequency(frequency);
                selectedST.setDueDate(dueDate);
                selectedST.setPaymentAmount(paymentAmount);

                // Save the updated scheduled transaction to the database
                boolean success = Database.updateScheduledTransaction(selectedST);
                if (success) {
                    // After saving, refresh the TableView with updated data
                    ObservableList<ScheduledTransaction> updatedSTs = Database.refreshScheduledTransactions();
                    table.setItems(updatedSTs); // Refresh table items
                    errorLabel.setText("Successfully edited.");

                    // Go back to the search page
                    primaryStage.setScene(getScheduledSearchTransactionScene(primaryStage));
                } else {
                    errorLabel.setText("Error, failed to save changes.");
                }
            } catch (NumberFormatException ex) {
                errorLabel.setText("Invalid input. Please check the payment amount.");
            }
        });

        // Layout for the edit page
        VBox editLayout = new VBox(10, scheduleNameField, accountNameComboBox, transactionTypeComboBox, frequencyField, dueDateField, 
                paymentAmountField, saveButton, errorLabel);
        editLayout.setPadding(new Insets(20));
        editLayout.setAlignment(Pos.CENTER);

        // Create and set the scene
        primaryStage.setScene(new Scene(editLayout, 400, 400));
    }
    
    
    private Scene getEnterTransactionTypesScene() {
        Label titleLabel = new Label("Enter Transaction");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        List<String> accountNames = new ArrayList<>();
        for (Account account : Database.getAllAccounts()) {
            accountNames.add(account.getAccountName());
        }
        
        ComboBox<String> accountDropdown = new ComboBox<>();
        accountDropdown.getItems().addAll(accountNames); 
        accountDropdown.getSelectionModel().selectFirst(); 
        
        ComboBox<String> transactionTypeDropdown = new ComboBox<>();
        transactionTypeDropdown.getItems().addAll(transactionTypes);
        transactionTypeDropdown.getSelectionModel().selectFirst(); 

        DatePicker transactionDatePicker = new DatePicker(LocalDate.now());

        TextField description = new TextField();
        description.setPromptText("Enter transaction description");

        TextField paymentAmount = new TextField();
        paymentAmount.setPromptText("Enter payment amount");

        TextField depositAmount = new TextField();
        depositAmount.setPromptText("Enter deposit amount");

        Label errorLabel = new Label();
        errorLabel.setStyle("-fx-text-fill: red;");

        Button saveButton = new Button("Save Transaction");
        saveButton.setOnAction(e -> {
            String account = accountDropdown.getValue();
            String transactionType = transactionTypeDropdown.getValue();
            LocalDate date = transactionDatePicker.getValue();
            String desc = description.getText().trim();
            String payAmount = paymentAmount.getText().trim();
            String depAmount = depositAmount.getText().trim();

            // Validation logic
            if (account == null || transactionType == null || date == null || desc.isEmpty()) {
                errorLabel.setText("Please fill in all required fields.");
            } else if (payAmount.isEmpty() && depAmount.isEmpty()) {
                errorLabel.setText("Please enter either a payment or deposit amount.");
            } else if (!payAmount.isEmpty() && !isDouble(payAmount)) {
                errorLabel.setText("Please enter a valid payment amount.");
            } else if (!depAmount.isEmpty() && !isDouble(depAmount)) {
                errorLabel.setText("Please enter a valid deposit amount.");
            } else {
                // Reset error label if validation passes
                errorLabel.setText("");

                // Save transaction to the database
                boolean saved = Database.saveTransaction(account, transactionType, date, desc,
                                                          payAmount.isEmpty() ? 0.0 : Double.parseDouble(payAmount),
                                                          depAmount.isEmpty() ? 0.0 : Double.parseDouble(depAmount));

                if (saved) {
                    errorLabel.setStyle("-fx-text-fill: green;");
                    errorLabel.setText("Transaction saved successfully.");
                    description.clear();
                    paymentAmount.clear();
                    depositAmount.clear();
                } else {
                    errorLabel.setText("Failed to save transaction. Try again.");
                }
            }
        });

        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        VBox layout = new VBox(10, titleLabel, accountDropdown, transactionTypeDropdown, transactionDatePicker,
                               description, paymentAmount, depositAmount, errorLabel, saveButton, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 400, 400);
    }

        

    
    private boolean isDouble(String text) {
        try {
            Double.parseDouble(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    

    private void showAccountsTable(Stage primaryStage) {
        TableView<Account> table = new TableView<>(Database.getAllAccounts());

        TableColumn<Account, String> nameCol = new TableColumn<>("Account Name");
        nameCol.setCellValueFactory(data -> data.getValue().accountNameProperty());

        TableColumn<Account, LocalDate> dateCol = new TableColumn<>("Opening Date");
        dateCol.setCellValueFactory(data -> data.getValue().openingDateProperty());

        TableColumn<Account, Double> balanceCol = new TableColumn<>("Opening Balance");
        balanceCol.setCellValueFactory(data -> data.getValue().openingBalanceProperty().asObject());

        table.getColumns().addAll(nameCol, dateCol, balanceCol);

        Button backButton = new Button("Back to Homepage");
        backButton.setStyle("-fx-background-color: #FF6347; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        backButton.setOnAction(e -> setHomeScene());

        VBox bottomLayout = new VBox(backButton);
        bottomLayout.setAlignment(Pos.CENTER);
        bottomLayout.setPadding(new Insets(10));

        BorderPane layout = new BorderPane(table);
        layout.setBottom(bottomLayout);

        primaryStage.setScene(new Scene(layout, 400, 300));
    }
    
    private void notifyScheduledTransactions() {
        // Fetch today's scheduled transactions (now using ScheduledTransaction)
        ObservableList<ScheduledTransaction> transactions = Database.getTodayScheduledTransactions();
        if (!transactions.isEmpty()) {
            StringBuilder message = new StringBuilder("You have the following scheduled transactions due today:\n\n");
            for (ScheduledTransaction scheduledTransaction : transactions) {
                message.append("- ")
                       .append(scheduledTransaction.getTransactionType())
                       .append(" of ")
                       .append(scheduledTransaction.getPaymentAmount() > 0 ? "$" + scheduledTransaction.getPaymentAmount() : "$" + scheduledTransaction.getPaymentAmount()) // Assuming paymentAmount for both positive and negative amounts
                       .append(" for ")
                       .append(scheduledTransaction.getAccountName())
                       .append(" (")
                       .append(scheduledTransaction.getScheduleName()) // Assuming 'scheduleName' is the description or a related field
                       .append(")\n");
            }

            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Scheduled Transactions Notification");
            alert.setHeaderText("Today's Scheduled Transactions");
            alert.setContentText(message.toString());
            alert.showAndWait(); // Ensures the alert is displayed
        }
    }
    
    private Scene getTransactionReportScene(Stage primaryStage) {
        // Title for the report page
        Label titleLabel = new Label("Transaction Report by Account");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        // Dropdown to select an account
        ComboBox<String> accountDropdown = new ComboBox<>();
        accountDropdown.getItems().addAll(Database.getAllAccountNames());
        accountDropdown.getSelectionModel().selectFirst();

        // TableView to display transactions
        TableView<Transaction> table = new TableView<>();

        // Define table columns (exclude account name as per the requirement)
        TableColumn<Transaction, String> typeCol = new TableColumn<>("Transaction Type");
        typeCol.setCellValueFactory(data -> data.getValue().transactionTypeProperty());

        TableColumn<Transaction, LocalDate> dateCol = new TableColumn<>("Transaction Date");
        dateCol.setCellValueFactory(data -> data.getValue().transactionDateProperty());

        TableColumn<Transaction, String> descriptionCol = new TableColumn<>("Description");
        descriptionCol.setCellValueFactory(data -> data.getValue().descriptionProperty());

        TableColumn<Transaction, Double> paymentAmountCol = new TableColumn<>("Payment Amount");
        paymentAmountCol.setCellValueFactory(data -> data.getValue().paymentAmountProperty().asObject());

        TableColumn<Transaction, Double> depositAmountCol = new TableColumn<>("Deposit Amount");
        depositAmountCol.setCellValueFactory(data -> data.getValue().depositAmountProperty().asObject());

        table.getColumns().addAll(typeCol, dateCol, descriptionCol, paymentAmountCol, depositAmountCol);

        // Fetch transactions for the selected account
        accountDropdown.setOnAction(e -> {
            String selectedAccount = accountDropdown.getValue();
            if (selectedAccount != null) {
                ObservableList<Transaction> transactions = FXCollections.observableArrayList(Database.getTransactionsByAccount(selectedAccount));
                transactions.sort((t1, t2) -> t2.getTransactionDate().compareTo(t1.getTransactionDate())); // Sort descending by date
                table.setItems(transactions);
            }
        });

        // Initially load transactions for the first account
        if (!accountDropdown.getItems().isEmpty()) {
            accountDropdown.getSelectionModel().selectFirst();
            accountDropdown.getOnAction().handle(null);
        }

        // Handle row selection to view transaction details
        table.setRowFactory(tv -> {
            TableRow<Transaction> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (!row.isEmpty() && event.getClickCount() == 2) {
                    Transaction selectedTransaction = row.getItem();
                    primaryStage.setScene(getTransactionDetailsScene(primaryStage, selectedTransaction, () -> primaryStage.setScene(getTransactionReportScene(primaryStage))));
                }
            });
            return row;
        });

        // Back button to return to the homepage
        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        // Layout for the report page
        VBox layout = new VBox(10, titleLabel, accountDropdown, table, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 1000, 600);
    }

    private Scene getTransactionDetailsScene(Stage primaryStage, Transaction transaction, Runnable backAction) {
        // Title for the details page
        Label titleLabel = new Label("Transaction Details");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        // Display transaction details
        Label typeLabel = new Label("Transaction Type: " + transaction.getTransactionType());
        Label dateLabel = new Label("Transaction Date: " + transaction.getTransactionDate());
        Label descriptionLabel = new Label("Description: " + transaction.getDescription());
        Label paymentAmountLabel = new Label("Payment Amount: " + transaction.getPaymentAmount());
        Label depositAmountLabel = new Label("Deposit Amount: " + transaction.getDepositAmount());

        // Back button to return to the report page
        Button backButton = new Button("Back to Report");
        backButton.setOnAction(e -> backAction.run());

        // Layout for the details page
        VBox layout = new VBox(10, titleLabel, typeLabel, dateLabel, descriptionLabel, paymentAmountLabel, depositAmountLabel, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 800, 400);
    }
    
    
    private Scene getTransactionTypeReportScene(Stage primaryStage) {
        // Title for the report page
        Label titleLabel = new Label("Transaction Type Report");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        // Dropdown to select a transaction type
        ComboBox<String> transactionTypeDropdown = new ComboBox<>();
        transactionTypeDropdown.getItems().addAll(Database.getAllTransactionTypes());
        transactionTypeDropdown.setPromptText("Select Transaction Type");

        // TableView to display transactions
        TableView<Transaction> table = new TableView<>();

        // Define table columns
        TableColumn<Transaction, String> accountCol = new TableColumn<>("Account Name");
        accountCol.setCellValueFactory(data -> data.getValue().accountNameProperty());

        TableColumn<Transaction, LocalDate> dateCol = new TableColumn<>("Transaction Date");
        dateCol.setCellValueFactory(data -> data.getValue().transactionDateProperty());

        TableColumn<Transaction, String> descriptionCol = new TableColumn<>("Description");
        descriptionCol.setCellValueFactory(data -> data.getValue().descriptionProperty());

        TableColumn<Transaction, Double> paymentAmountCol = new TableColumn<>("Payment Amount");
        paymentAmountCol.setCellValueFactory(data -> data.getValue().paymentAmountProperty().asObject());

        TableColumn<Transaction, Double> depositAmountCol = new TableColumn<>("Deposit Amount");
        depositAmountCol.setCellValueFactory(data -> data.getValue().depositAmountProperty().asObject());

        table.getColumns().addAll(accountCol, dateCol, descriptionCol, paymentAmountCol, depositAmountCol);

        // Update table dynamically based on dropdown selection
        transactionTypeDropdown.setOnAction(e -> {
            String selectedType = transactionTypeDropdown.getValue();
            if (selectedType != null) {
                ObservableList<Transaction> results = FXCollections.observableArrayList(Database.getTransactionsByType(selectedType));
                results.sort((t1, t2) -> t2.getTransactionDate().compareTo(t1.getTransactionDate())); // Sort by date descending
                table.setItems(results);
            } else {
                table.setItems(FXCollections.emptyObservableList()); // Clear the table if no type is selected
            }
        });

        // Handle row selection to view transaction details
        table.setRowFactory(tv -> {
            TableRow<Transaction> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (!row.isEmpty() && event.getClickCount() == 2) {
                    Transaction transaction = row.getItem();
                    Scene detailsScene = getTransactionDetailsScene(primaryStage, transaction, primaryStage.getScene());
                    primaryStage.setScene(detailsScene);
                }
            });
            return row;
        });

        // Back button to return to the homepage
        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        // Layout for the report page
        VBox layout = new VBox(10, titleLabel, transactionTypeDropdown, table, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 800, 600);
    }




    // Database method to fetch transactions by type
    public static List<Transaction> getTransactionsByType(String transactionType) {
        List<Transaction> results = new ArrayList<>();
        String sql = "SELECT * FROM transactions WHERE transaction_type = ? ORDER BY transaction_date DESC";

        try (Connection conn = DriverManager.getConnection(Database.DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, transactionType);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                results.add(new Transaction(
                	rs.getInt("id"),
                    rs.getString("account_name"),
                    rs.getString("transaction_type"),
                    LocalDate.parse(rs.getString("transaction_date")),
                    rs.getString("description"),
                    rs.getDouble("payment_amount"),
                    rs.getDouble("deposit_amount")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return results;
    }

    // Scene for transaction details
    private Scene getTransactionDetailsScene(Stage primaryStage, Transaction transaction, Scene previousScene) {
        Label titleLabel = new Label("Transaction Details");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        Label accountNameLabel = new Label("Account Name: " + transaction.getAccountName());
        Label transactionDateLabel = new Label("Transaction Date: " + transaction.getTransactionDate());
        Label descriptionLabel = new Label("Description: " + transaction.getDescription());
        Label paymentAmountLabel = new Label("Payment Amount: " + transaction.getPaymentAmount());
        Label depositAmountLabel = new Label("Deposit Amount: " + transaction.getDepositAmount());

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> primaryStage.setScene(previousScene));

        VBox layout = new VBox(10, titleLabel, accountNameLabel, transactionDateLabel, descriptionLabel, 
                               paymentAmountLabel, depositAmountLabel, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 400, 400);
    }





    public static void main(String[] args) {
        launch(args);
    }
    
    
}
