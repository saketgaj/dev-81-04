package application;

import javafx.application.Application;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Main extends Application {
    private static List<String> accountNames = new ArrayList<>();
    private static Set<String> transactionTypes = new HashSet<>(); // Store unique transaction types
    private Stage primaryStage;
    private Button viewAccountsButton;

    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        Database.createDatabase();

        loadResources();

        setHomeScene();

        primaryStage.setTitle("MyBudgeter");
        primaryStage.setResizable(true);
        primaryStage.show();
    }

    private void loadResources() {
        try {
            Font.loadFont(Main.class.getResourceAsStream("/RobotoMono.ttf"), 14);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setHomeScene() {
        Label titleLabel = new Label("MyBudgeter");
        titleLabel.setFont(new Font("Roboto Mono", 24));
        titleLabel.setTextFill(javafx.scene.paint.Color.web("#2E8B57"));

        Button createAccountButton = new Button("Create New Account");
        createAccountButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        createAccountButton.setOnAction(e -> primaryStage.setScene(new NewAccountPage(primaryStage, accountNames).getNewAccountScene()));

        Button defineTransactionTypesButton = new Button("Define Transaction Types");
        defineTransactionTypesButton.setStyle("-fx-background-color: #FF8C00; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        defineTransactionTypesButton.setOnAction(e -> primaryStage.setScene(getDefineTransactionTypesScene()));
        
        Button getEnterTransactionTypesSceneButton = new Button("Enter Transaction");
        getEnterTransactionTypesSceneButton.setStyle("-fx-background-color: #FF8C00; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        getEnterTransactionTypesSceneButton.setOnAction(e -> primaryStage.setScene(getEnterTransactionTypesScene()));

        if (viewAccountsButton == null) {
            viewAccountsButton = new Button("View All Accounts");
            viewAccountsButton.setStyle("-fx-background-color: #008CBA; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
            viewAccountsButton.setOnAction(e -> showAccountsTable(primaryStage));
        }

        VBox homeLayout = new VBox(20);
        homeLayout.setPadding(new Insets(30));
        homeLayout.setAlignment(Pos.CENTER);
        homeLayout.setStyle("-fx-background-color: #F0F8FF;");
        homeLayout.getChildren().addAll(titleLabel, createAccountButton, defineTransactionTypesButton, getEnterTransactionTypesSceneButton, viewAccountsButton);

        primaryStage.setScene(new Scene(homeLayout, 400, 300));
    }

    private Scene getDefineTransactionTypesScene() {
        Label titleLabel = new Label("Define Transaction Types");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        TextField transactionTypeField = new TextField();
        transactionTypeField.setPromptText("Enter transaction type name");

        Label errorLabel = new Label();
        errorLabel.setStyle("-fx-text-fill: red;");

        Button saveButton = new Button("Save Transaction Type");
        saveButton.setOnAction(e -> {
            String transactionType = transactionTypeField.getText().trim();

            if (transactionType.isEmpty()) {
                errorLabel.setText("Transaction type name cannot be empty.");
            } else if (transactionTypes.contains(transactionType)) {
                errorLabel.setText("Transaction type already exists.");
            } else {
                transactionTypes.add(transactionType);
                errorLabel.setText("Transaction type added successfully.");
                transactionTypeField.clear();
            }
        });

        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        VBox layout = new VBox(10, titleLabel, transactionTypeField, errorLabel, saveButton, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 400, 300);
    }
    
    private Scene getEnterTransactionTypesScene() {
        Label titleLabel = new Label("Enter Transaction");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        List<String> accountNames = new ArrayList<>();
        for (Account account : Database.getAllAccounts()) {
            accountNames.add(account.getAccountName());
        }
        
        ComboBox<String> accountDropdown = new ComboBox<>();
        accountDropdown.getItems().addAll(accountNames); 
        accountDropdown.getSelectionModel().selectFirst(); 
        
        ComboBox<String> transactionTypeDropdown = new ComboBox<>();
        transactionTypeDropdown.getItems().addAll(transactionTypes);
        transactionTypeDropdown.getSelectionModel().selectFirst(); 

        DatePicker transactionDatePicker = new DatePicker(LocalDate.now());

        TextField description = new TextField();
        description.setPromptText("Enter transaction description");

        TextField paymentAmount = new TextField();
        paymentAmount.setPromptText("Enter payment amount");

        TextField depositAmount = new TextField();
        depositAmount.setPromptText("Enter deposit amount");

        Label errorLabel = new Label();
        errorLabel.setStyle("-fx-text-fill: red;");

        Button saveButton = new Button("Save Transaction");
        saveButton.setOnAction(e -> {
            String account = accountDropdown.getValue();
            String transactionType = transactionTypeDropdown.getValue();
            LocalDate date = transactionDatePicker.getValue();
            String desc = description.getText().trim();
            String payAmount = paymentAmount.getText().trim();
            String depAmount = depositAmount.getText().trim();

            // Validation logic
            if (account == null || transactionType == null || date == null || desc.isEmpty()) {
                errorLabel.setText("Please fill in all required fields.");
            } else if (payAmount.isEmpty() && depAmount.isEmpty()) {
                errorLabel.setText("Please enter either a payment or deposit amount.");
            } else if (!payAmount.isEmpty() && !isDouble(payAmount)) {
                errorLabel.setText("Please enter a valid payment amount.");
            } else if (!depAmount.isEmpty() && !isDouble(depAmount)) {
                errorLabel.setText("Please enter a valid deposit amount.");
            } else {
                // Reset error label if validation passes
                errorLabel.setText("");

                // Save transaction to the database
                boolean saved = Database.saveTransaction(account, transactionType, date, desc,
                                                          payAmount.isEmpty() ? 0.0 : Double.parseDouble(payAmount),
                                                          depAmount.isEmpty() ? 0.0 : Double.parseDouble(depAmount));

                if (saved) {
                    errorLabel.setStyle("-fx-text-fill: green;");
                    errorLabel.setText("Transaction saved successfully.");
                    description.clear();
                    paymentAmount.clear();
                    depositAmount.clear();
                } else {
                    errorLabel.setText("Failed to save transaction. Try again.");
                }
            }
        });

        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        VBox layout = new VBox(10, titleLabel, accountDropdown, transactionTypeDropdown, transactionDatePicker,
                               description, paymentAmount, depositAmount, errorLabel, saveButton, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 400, 400);
    }

        

    
    private boolean isDouble(String text) {
        try {
            Double.parseDouble(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    

    private void showAccountsTable(Stage primaryStage) {
        TableView<Account> table = new TableView<>(Database.getAllAccounts());

        TableColumn<Account, String> nameCol = new TableColumn<>("Account Name");
        nameCol.setCellValueFactory(data -> data.getValue().accountNameProperty());

        TableColumn<Account, LocalDate> dateCol = new TableColumn<>("Opening Date");
        dateCol.setCellValueFactory(data -> data.getValue().openingDateProperty());

        TableColumn<Account, Double> balanceCol = new TableColumn<>("Opening Balance");
        balanceCol.setCellValueFactory(data -> data.getValue().openingBalanceProperty().asObject());

        table.getColumns().addAll(nameCol, dateCol, balanceCol);

        Button backButton = new Button("Back to Homepage");
        backButton.setStyle("-fx-background-color: #FF6347; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;");
        backButton.setOnAction(e -> setHomeScene());

        VBox bottomLayout = new VBox(backButton);
        bottomLayout.setAlignment(Pos.CENTER);
        bottomLayout.setPadding(new Insets(10));

        BorderPane layout = new BorderPane(table);
        layout.setBottom(bottomLayout);

        primaryStage.setScene(new Scene(layout, 400, 300));
    }
    private Scene getScheduledTransactionsScene() {
        Label titleLabel = new Label("Scheduled Transactions");
        titleLabel.setFont(new Font("Roboto Mono", 20));

        // Create a TableView for scheduled transactions
        TableView<Transaction> table = new TableView<>();
        table.getItems().addAll(Database.getAllScheduledTransactions());

        // Define columns
        TableColumn<Transaction, String> accountCol = new TableColumn<>("Account Name");
        accountCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getAccountName()));

        TableColumn<Transaction, String> typeCol = new TableColumn<>("Transaction Type");
        typeCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getTransactionType()));

        TableColumn<Transaction, LocalDate> dateCol = new TableColumn<>("Transaction Date");
        dateCol.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getTransactionDate()));

        TableColumn<Transaction, String> descriptionCol = new TableColumn<>("Description");
        descriptionCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getDescription()));

        TableColumn<Transaction, Double> paymentCol = new TableColumn<>("Payment Amount");
        paymentCol.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getPaymentAmount()));

        TableColumn<Transaction, Double> depositCol = new TableColumn<>("Deposit Amount");
        depositCol.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getDepositAmount()));

        // Add columns to the table
        table.getColumns().addAll(accountCol, typeCol, dateCol, descriptionCol, paymentCol, depositCol);

        // Sort table by Transaction Date in ascending order
        table.getSortOrder().add(dateCol);

        // Back button to return to the homepage
        Button backButton = new Button("Back to Homepage");
        backButton.setOnAction(e -> setHomeScene());

        VBox layout = new VBox(10, titleLabel, table, backButton);
        layout.setPadding(new Insets(20));
        layout.setAlignment(Pos.CENTER);

        return new Scene(layout, 600, 400);
    }



    public static void main(String[] args) {
        launch(args);
    }
}
